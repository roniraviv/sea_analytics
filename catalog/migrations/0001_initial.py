# Generated by Django 2.1.7 on 2021-02-23 08:11

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_upload_path.upload_path
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('merged', models.BooleanField(default=False)),
                ('training_tracks', models.PositiveIntegerField(blank=True, null=True, verbose_name='Tracks Amount')),
                ('training_segments0', models.PositiveIntegerField(blank=True, null=True, verbose_name='Segments Amount in Track0')),
                ('training_points00', models.PositiveIntegerField(blank=True, null=True, verbose_name='Points Amount in Segment0 of Track0')),
                ('training_start_time', models.DateTimeField(blank=True, null=True, verbose_name='Start Time')),
                ('training_finish_time', models.DateTimeField(blank=True, null=True, verbose_name='Finish Time')),
                ('training_total_time', models.FloatField(blank=True, null=True, verbose_name='Total Time [min]')),
                ('training_2d_distance', models.FloatField(blank=True, null=True, verbose_name='2D Distance [m]')),
                ('training_3d_distance', models.FloatField(blank=True, null=True, verbose_name='3D Distance [m]')),
                ('training_avg_speed', models.FloatField(blank=True, null=True, verbose_name='Average Speed [km/hr]')),
                ('training_max_speed', models.FloatField(blank=True, null=True, verbose_name='Max Speed [km/hr]')),
                ('training_total_uphill', models.FloatField(blank=True, null=True, verbose_name='Total Uphill [m]')),
                ('training_total_downhill', models.FloatField(blank=True, null=True, verbose_name='Total Downhill [m]')),
                ('training_avg_p2p_distance', models.FloatField(blank=True, null=True, verbose_name='Average distance between points [m]')),
                ('training_interesting_points_num', models.PositiveIntegerField(blank=True, null=True, verbose_name='Interesting-Points Amount')),
                ('training_interesting_points_idx', models.TextField(blank=True, null=True, verbose_name='Interesting-Points Indices (comma delimited)')),
                ('training_interesting_points_time', models.TextField(blank=True, null=True, verbose_name='Interesting-Points Time (comma delimited)')),
                ('url', models.TextField(blank=True, default='/Users/shahargino/Projects/Sea_Analytics.v2.roni/media', null=True, verbose_name='Relative URL Path to GPX file')),
                ('uniq_id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Map (auto-set)')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(blank=True, choices=[(1, 'Video'), (2, 'Audio')], default=1, null=True, verbose_name='Media Type')),
                ('deleted_files', models.TextField(blank=True, default='', null=True, verbose_name='Deleted media files')),
                ('url', models.TextField(blank=True, default='/Users/shahargino/Projects/Sea_Analytics.v2.roni/media', null=True, verbose_name='Path to media files')),
                ('uniq_id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Media (auto-set)')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Trainee'), (2, 'Trainer')], null=True, verbose_name='User Type')),
                ('email_confirmed', models.BooleanField(default=False)),
                ('org_name', models.CharField(blank=True, help_text='Organization Name', max_length=100, null=True)),
                ('avatar', models.ImageField(blank=True, default='NA', null=True, upload_to=django_upload_path.upload_path.auto_cleaned_path, verbose_name='Profile picture')),
                ('club_logo', models.ImageField(blank=True, default='NA', null=True, upload_to=django_upload_path.upload_path.auto_cleaned_path, verbose_name='Profile club logo')),
                ('trainees', models.ManyToManyField(blank=True, default=None, limit_choices_to={'profile__type': '1'}, related_name='Trainees', to=settings.AUTH_USER_MODEL)),
                ('trainers', models.ManyToManyField(blank=True, default=None, limit_choices_to={'profile__type': '2'}, related_name='Trainers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trainee_sel', models.CharField(blank=True, max_length=100, null=True)),
                ('training_id', models.CharField(blank=True, max_length=250, verbose_name='Training ID')),
                ('training_type', models.CharField(blank=True, choices=[('1', 'Short Course'), ('2', 'Coastal/Inshore'), ('3', 'Offshore'), ('4', 'Oceanic'), ('5', 'Other')], default='1', max_length=250, null=True, verbose_name='Training Type')),
                ('training_date', models.DateField(blank=True, default=datetime.date.today, null=True, verbose_name='Training Creation')),
                ('training_location', models.CharField(blank=True, default='Sea', max_length=250, verbose_name='Training Location')),
                ('training_duration', models.FloatField(blank=True, default=200.0, null=True, verbose_name='Total Time [min]')),
                ('training_vessels_num', models.PositiveIntegerField(blank=True, default=2, null=True, verbose_name='Num of Vessels')),
                ('training_wind_direction', models.CharField(blank=True, default='11', max_length=100, null=True)),
                ('training_wind_speed', models.FloatField(blank=True, default=22.0, null=True, verbose_name='Wind Speed [km/hr]')),
                ('training_waves', models.FloatField(blank=True, default=33.0, null=True, verbose_name='Waves [m]')),
                ('training_current', models.FloatField(blank=True, default=44.0, null=True, verbose_name='Current [m/s]')),
                ('training_comments', models.TextField(blank=True, default='n/a', null=True, verbose_name='Comments')),
                ('lut_user_vessel_id', models.TextField(blank=True, null=True, verbose_name='User_x:VesselID_x')),
                ('uniq_id', models.UUIDField(default=uuid.uuid4, help_text='Unique ID for this particular Training (auto-set)')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='trainings',
            field=models.ManyToManyField(blank=True, default=None, related_name='Trainings', to='catalog.Training'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='media',
            name='training',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Training'),
        ),
        migrations.AddField(
            model_name='media',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='map',
            name='training',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.Training'),
        ),
        migrations.AddField(
            model_name='map',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
